schema {
  query: Query
  mutation: Mutation
}

type Query {
  posts(category: Category, cursor: String): PostList!
  post(hk: String!): Post
  comments(postId: String!, cursor: String): CommentList!
  comment(hk: String!): Comment!
  aggReportsOfPost(cursor: String, end: Boolean): AggReportPostList!
  aggReportsOfComment(cursor: String, end: Boolean): AggReportCommentList!
  reports(hk: String!, rk: String!): ReportPostList!

  myPosts(cursor: String, like: Boolean): PostList!
  myComments(cursor: String, like: Boolean): CommentList!
  myPostReports(cursor: String): ReportPostList!
  myCommentReports(cursor: String): ReportCommentList!

  uploadUrl(key: String!): String
}
type PostList {
  items: [Post]!
  cursor: String
  firstResult: Boolean
}
type Post {
  hk: String! # hash
  rk: String! # range
  title: String!
  likes: Int!
  views: Int!
  children: Int!
  category: String
  createdAt: String
  content: String
  userId: String
  cover: String
  user: User!

  status: EEntityStatus
  byUser: String
}
type CommentList {
  items: [Comment]!
  cursor: String
  firstResult: Boolean
}
type Comment {
  hk: String!
  rk: String!
  content: String!
  postId: String
  userId: String
  createdAt: String
  updatedAt: String
  children: Int
  likes: Int!
  user: User!
  commentId: String
  comments: String!

  status: EEntityStatus
  refUserName: String

  comment: Comment
  post: Post
}
type AggReportPostList {
  items: [AggReportPost]!
  cursor: String
  firstResult: Boolean
}
type AggReportPost {
  hk: String!
  rk: String!
  agg: String!
  reports: String
  reported: Int!
  data: Post
  status: EEntityStatus!
  answer: String
  processed: Int
}
type AggReportCommentList {
  items: [AggReportComment]!
  cursor: String
  firstResult: Boolean
}
type AggReportComment {
  hk: String!
  rk: String!
  agg: String!
  reports: String
  reported: Int!
  data: Comment
  status: EEntityStatus!
  answer: String
  processed: Int
}
type ReportPostList {
  items: [ReportPost]!
  cursor: String
  firstResult: Boolean
}
type ReportCommentList {
  items: [ReportComment]!
  cursor: String
  firstResult: Boolean
}
type ReportPost {
  hk: String!
  rk: String!
  userId: String
  byUser: String
  content: String!
  user: User!
  data: Post
  status: EEntityStatus!
  answer: String
}
type ReportComment {
  hk: String!
  rk: String!
  userId: String
  byUser: String
  content: String!
  user: User!
  data: Comment
  status: EEntityStatus!
  answer: String
}
type User {
  ip: String!
  name: String!
  id: String
}

enum Category {
  news
  create_channel
}

### mutation
type Mutation {
  post(data: PostMutationInput!, user: NotMemberInput): Post
  comment(data: CommentMutationInput!, user: NotMemberInput): Comment
  reply(data: ReplyMutationInput!, user: NotMemberInput): Comment
  report(data: DocumentInput!, content: String!): Comment

  likePost(hk: String!): Post
  likeComment(hk: String!): Comment

  deletePost(postId: String!, user: NotMemberInput): Post
  deleteComment(commentId: String!, user: NotMemberInput): Comment

  replyReport(hk: String!, entity: EEntityType!, answer: String!, status: EEntityStatus): Boolean
}

### input
input PostMutationInput {
  category: String!
  title: String!
  content: String!
  cover: String
}
input CommentMutationInput {
  postId: String!
  content: String!
}
input ReplyMutationInput {
  postId: String!
  content: String!
  commentId: String!
  refUserName: String
}
input NotMemberInput {
  name: String!
  pw: String!
}
input DocumentInput {
  hk: String
  rk: String
}

enum EEntityStatus {
  requestedBlock
  blockedBySystem
  deletedByUser
  deletedByAdmin
  deletedBySystem
  innocent
  inAudit
}
enum EEntityType {
  post
  comment
}